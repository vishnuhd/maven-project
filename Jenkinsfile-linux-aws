pipeline {
    agent { label 'docker' }
	environment {
        REGISTRY = "https://registry.hub.docker.com"
		CONTAINER_NAME="hello-world"
		CONTAINER_TAG="latest"
		DOCKER_HUB_USER="vishnuhdadhich"
		HTTP_PORT="80"
    }
    stages {
        stage('Build') {
            steps {
                sh 'docker run --rm -v "$PWD":/app -w /app maven mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install -Pcoverage-per-test'
            }
        }
        stage('Test') {
            steps {
                sh 'docker run --rm -v "$PWD":/app -w /app maven mvn test'
            }
            post {
                always {
                    junit 'server/target/surefire-reports/*.xml'
                }
            }
        }
	/*
		stage('SonarQube') {
            steps {
                sh '''				
				docker run --rm -v "$PWD":/app -w /app maven mvn sonar:sonar
				'''
            }
        }
	*/
        stage('Docker build') {
            steps {
                sh 'docker build -f Dockerfile -t $CONTAINER_NAME:$CONTAINER_TAG .'
            }
        }
		stage('Docker Push'){
			steps {
				withCredentials([usernamePassword(credentialsId: 'dockerhubid', passwordVariable: 'PasswordVar', usernameVariable: 'UserNameVar')]) {
					sh '''
					set +x
					docker login -u $DOCKER_HUB_USER -p $PasswordVar
					docker tag $CONTAINER_NAME:$CONTAINER_TAG $DOCKER_HUB_USER/$CONTAINER_NAME:$CONTAINER_TAG
					docker push $DOCKER_HUB_USER/$CONTAINER_NAME:$CONTAINER_TAG
					echo "Image push complete"
					'''
				}
			}
		}
		/*
		stage('Docker Run') {
            steps {
				sh '''
				set +x
				echo "Stopping the older container if it exists"
				docker stop $CONTAINER_NAME || true
				
				echo "Starting the new container"
				
				docker pull $DOCKER_HUB_USER/$CONTAINER_NAME
				docker run -d --rm -p $HTTP_PORT:8080 --name $CONTAINER_NAME $DOCKER_HUB_USER/$CONTAINER_NAME:$CONTAINER_TAG
				echo "Application started on port: ${HTTP_PORT} (http)"
				#docker run --rm --name hello-world -d -p 80:8080 hello-world:1
				
				myip="$(dig +short myip.opendns.com @resolver1.opendns.com)"
				echo "Web application started at the following url : http://${myip}/webapp"
				''' 
            }
        }
	stage('Automated Test') {
            steps {
               sh 'echo "Test has passed"'
            }
        }
	*/
	stage('K8 Deployment') {
   steps {
     node('k8-master') {
       sh '''
       echo "Deleting the older deployment if it exists"
       kubectl delete deploy/hello-world svc/hello-world || true
       sleep 10
       echo "Creating the new deployment and svc"
       kubectl create -f main.yaml
       sleep 10
       kubectl get svc
       echo "Web application started"
       '''
     }
  }
    }
	post { 
        always { 
            cleanWs()
			sh 'docker image prune -af'
        }
    }
}
